DROP TABLE IF EXISTS confirm_tokens;
DROP TABLE IF EXISTS persistent_logins;
DROP TABLE IF EXISTS internal_comments;
DROP TABLE IF EXISTS comments;
DROP TABLE IF EXISTS internal_comments_sell;
DROP TABLE IF EXISTS comments_sell;
DROP TABLE IF EXISTS posts;
DROP TABLE IF EXISTS sell_business;
DROP TABLE IF EXISTS user_roles;
DROP TABLE IF EXISTS chat_messages;
DROP TABLE IF EXISTS chat_room;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS cities;
DROP TABLE IF EXISTS countries;
DROP TABLE IF EXISTS send_mails;
DROP SEQUENCE IF EXISTS user_id_seq;

CREATE SEQUENCE user_id_seq START 1;

CREATE TABLE countries
(
    id           INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name         VARCHAR           NOT NULL,
    name_en      VARCHAR           NOT NULL
);

CREATE TABLE cities
(
    id              INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name            VARCHAR         NOT NULL,
    name_en         VARCHAR         NOT NULL,
    country_id      INTEGER         NOT NULL,
    FOREIGN KEY (country_id) REFERENCES countries (id)
);
CREATE UNIQUE INDEX cities_unique_name_en_idx ON cities (name_en);

CREATE TABLE users
(
    id           INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id      VARCHAR                       NULL,
    name         VARCHAR                       NOT NULL,
    date         TIMESTAMP                     NOT NULL,
    real_name    VARCHAR                       NULL,
    email        VARCHAR                       NULL,
    password     VARCHAR                       NOT NULL,
    enabled      BOOLEAN                       NOT NULL,
    initial      VARCHAR(1)                    NOT NULL,
    color        VARCHAR                       NOT NULL,
    gender       VARCHAR(1) DEFAULT 'U'        NOT NULL,
    provider     VARCHAR                       NOT NULL,
    busyness     INTEGER DEFAULT 0             NOT NULL,
    day          INTEGER DEFAULT 0             NOT NULL,
    month        INTEGER DEFAULT 0             NOT NULL,
    year         INTEGER DEFAULT 0             NOT NULL,
    city_id      INTEGER DEFAULT 0             NOT NULL,
    country_id   INTEGER DEFAULT 0             NOT NULL,
    FOREIGN KEY (country_id) REFERENCES countries (id),
    FOREIGN KEY (city_id) REFERENCES cities (id)
);
CREATE UNIQUE INDEX users_unique_name_idx ON users (name);
CREATE UNIQUE INDEX users_unique_email_idx ON users (email);
CREATE UNIQUE INDEX users_unique_user_id_idx ON users (user_id);

CREATE TABLE confirm_tokens
(
    id                       INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    date                     TIMESTAMP          NOT NULL,
    confirm_token            VARCHAR(500)       NOT NULL,
    user_id                  INTEGER            NOT NULL,
    type                     INTEGER            NOT NULL,
    FOREIGN KEY (user_id) REFERENCES USERS (id)
);
CREATE UNIQUE INDEX token_unique_user_idx ON confirm_tokens (confirm_token);

CREATE TABLE persistent_logins (
    series          VARCHAR(64) PRIMARY KEY,
    username        VARCHAR(100)               NOT NULL,
    token           VARCHAR(64)                NOT NULL,
    last_used       TIMESTAMP                  NOT NULL
);
CREATE UNIQUE INDEX persistent_unique_token_idx ON persistent_logins (token);

CREATE TABLE user_roles
(
    user_id      INTEGER        NOT NULL,
    role         VARCHAR,
    CONSTRAINT user_roles_idx UNIQUE (user_id, role),
    FOREIGN KEY (user_id) REFERENCES USERS (id) ON DELETE CASCADE
);

CREATE TABLE posts
(
    id           INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title        VARCHAR               NOT NULL,
    text         VARCHAR               NOT NULL,
    date         TIMESTAMP             NOT NULL,
    show         INTEGER DEFAULT 0     NOT NULL,
    comments     INTEGER DEFAULT 0     NOT NULL,
    active       INTEGER DEFAULT 1     NOT NULL,
    user_id      INTEGER               NOT NULL,
    city_id      INTEGER DEFAULT 0     NOT NULL,
    country_id   INTEGER DEFAULT 0     NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users (id),
    FOREIGN KEY (city_id) REFERENCES cities (id),
    FOREIGN KEY (country_id) REFERENCES countries (id)
);
CREATE INDEX posts_user_id_idx ON posts (user_id);
CREATE INDEX posts_active_idx ON posts (active);

CREATE TABLE sell_business
(
    id           INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title        VARCHAR               NOT NULL,
    text         VARCHAR               NOT NULL,
    date         TIMESTAMP             NOT NULL,
    show         INTEGER DEFAULT 0     NOT NULL,
    comments     INTEGER DEFAULT 0     NOT NULL,
    active       INTEGER DEFAULT 1     NOT NULL,
    user_id      INTEGER               NOT NULL,
    city_id      INTEGER DEFAULT 0     NOT NULL,
    country_id   INTEGER DEFAULT 0     NOT NULL,
    price        INTEGER               NOT NULL,
    age          VARCHAR(100)          NOT NULL,
    profit       INTEGER               NOT NULL,
    income       INTEGER               NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users (id),
    FOREIGN KEY (city_id) REFERENCES cities (id),
    FOREIGN KEY (country_id) REFERENCES countries (id)
);
CREATE INDEX sell_business_user_id_idx ON sell_business (user_id);
CREATE INDEX sell_business_active_idx ON sell_business (active);

CREATE TABLE comments
(
    id           INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    text         VARCHAR               NOT NULL,
    date         TIMESTAMP             NOT NULL,
    post_id      INTEGER               NOT NULL,
    user_id      INTEGER               NOT NULL,
    FOREIGN KEY (post_id) REFERENCES posts (id),
    FOREIGN KEY (user_id) REFERENCES users (id)
);
CREATE INDEX comments_user_id_idx ON comments (user_id);
CREATE INDEX comments_post_id_idx ON comments (post_id);

CREATE TABLE internal_comments
(
    id              INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    text            VARCHAR               NOT NULL,
    date            TIMESTAMP             NOT NULL,
    comment_id      INTEGER               NOT NULL,
    user_id         INTEGER               NOT NULL,
    FOREIGN KEY (comment_id) REFERENCES comments (id),
    FOREIGN KEY (user_id) REFERENCES users (id)
);
CREATE INDEX internal_comments_comment_id_idx ON internal_comments (comment_id);
CREATE INDEX internal_comments_user_id_idx ON internal_comments (user_id);

CREATE TABLE comments_sell
(
    id           INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    text         VARCHAR               NOT NULL,
    date         TIMESTAMP             NOT NULL,
    post_id      INTEGER               NOT NULL,
    user_id      INTEGER               NOT NULL,
    FOREIGN KEY (post_id) REFERENCES sell_business (id),
    FOREIGN KEY (user_id) REFERENCES users (id)
);
CREATE INDEX comments_sell_user_id_idx ON comments_sell (user_id);
CREATE INDEX comments_sell_post_id_idx ON comments_sell (post_id);

CREATE TABLE internal_comments_sell
(
    id              INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    text            VARCHAR               NOT NULL,
    date            TIMESTAMP             NOT NULL,
    comment_id      INTEGER               NOT NULL,
    user_id         INTEGER               NOT NULL,
    FOREIGN KEY (comment_id) REFERENCES comments_sell (id),
    FOREIGN KEY (user_id) REFERENCES users (id)
);
CREATE INDEX internal_comments_sell_comment_id_idx ON internal_comments_sell (comment_id);
CREATE INDEX internal_comments_sell_user_id_idx ON internal_comments_sell (user_id);

CREATE TABLE chat_room
(
    id              INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    chat_id         VARCHAR               NOT NULL,
    sender_id       INTEGER               NOT NULL,
    recipient_id    INTEGER               NOT NULL,
    last_message    INTEGER               NULL,
    user_read       INTEGER DEFAULT 0     NOT NULL
);
CREATE UNIQUE INDEX chat_room_unique_chat_id_idx ON chat_room (chat_id);
CREATE INDEX chat_room_sender_id_idx ON chat_room (sender_id);
CREATE INDEX chat_room_recipient_id_idx ON chat_room (recipient_id);
CREATE INDEX chat_room_user_read_idx ON chat_room (user_read);

CREATE TABLE chat_messages
(
    id              INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    content         VARCHAR               NOT NULL,
    chat_id         INTEGER               NOT NULL,
    sender_id       INTEGER               NOT NULL,
    recipient_id    INTEGER               NOT NULL,
    date            TIMESTAMP             NOT NULL,
    FOREIGN KEY (chat_id) REFERENCES chat_room (id)
);
CREATE INDEX chat_messages_chat_id_idx ON chat_messages (chat_id);
CREATE INDEX chat_messages_sender_id_idx ON chat_messages (sender_id);
CREATE INDEX chat_messages_recipient_id_idx ON chat_messages (recipient_id);

CREATE TABLE send_mails
(
    id              INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    subject         VARCHAR               NOT NULL,
    mail            VARCHAR               NOT NULL,
    date            TIMESTAMP             NOT NULL,
    status          INTEGER               NOT NULL
);